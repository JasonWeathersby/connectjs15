{"version":3,"file":"out2/index.html","sources":["smoke.c"],"names":[],"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","sourcesContent":["/*This source code copyrighted by Lazy Foo' Productions (2004-2015)\nand may not be redistributed without written permission.*/\n\n//Using SDL, SDL_image, standard IO, and strings\n//Using SDL, SDL_image, standard IO, and strings\n#include <sys/time.h>\n#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <SDL2/SDL.h>\n#include <SDL2/SDL_image.h>\n\n#define TRUE 1\n#define FALSE 0\n\n#ifdef EMSCRIPTEN\n#include <emscripten/emscripten.h>\n#endif\n\n//Screen dimension constants\nconst int SCREEN_WIDTH = 640;\nconst int SCREEN_HEIGHT = 480;\nstatic SDL_Texture *smokeTexture = NULL;\nstatic SDL_Texture *bgTexture = NULL;\nstatic SDL_Renderer *renderer = NULL;\n//The window we'll be rendering to\nSDL_Window* gWindow = NULL;\n//SDL_Rect smoke;\nSDL_Rect smoke;\nSDL_Rect bg;\nstatic int quit = FALSE;\n\n\n//Loads media\nint loadMedia();\n\n\n#define PART_COUNT 25\n\ntypedef struct particle {\n    double m_x;\n    double m_y;\n    Uint32 m_age;\n    float m_xVector;\n    float m_yVector;\n    float m_scale;\n    float m_alpha;\n    int m_canRegen;\n    double m_angle;\n    Uint32 m_timeDie;\n} Particle;\n\ntypedef struct particles {\n    double m_x;\n    double m_y;\n    double m_dieRate;\n    int m_image;\n    float m_speed;\n    float m_alpha;\n    float m_windVelocity;\n    Uint32 m_lastRender;\n    Particle particles[PART_COUNT];\n\n} Particles;\n\nvoid logParticle(Particle * em)\n{\n    printf(\"emitter x %f y=%f age=%u scale=%f timeTime=%u\\n\", em->m_x, em->m_y, em->m_age, em->m_scale, em->m_timeDie );\n\n}\n\nvoid logEmitter(Particles * em, int parts)\n{\n    printf(\"emitter x %f y=%f dieRate=%f speed=%f alpha=%f wind=%f\\n\", em->m_x, em->m_y, em->m_dieRate, em->m_speed, em->m_alpha, em->m_windVelocity );\n    if ( parts > 0) {\n        for (int i = 0; i < PART_COUNT; i++)\n        {\n            logParticle( &em->particles[i]);\n        }\n    }\n}\n\n\n\n\ndouble rand_range(double x0, double x1)\n{\n    return x0 + (x1 - x0) * rand() / ((double) RAND_MAX);\n}\ndouble r01()\n{\n    return rand_range(0, 1);\n}\nvoid startRand(Particles *emitter, Particle* part, int partnumber)\n{\n    //srand(time(0));\n    // smoke rises and spreads\n    part->m_xVector = (r01()) * .25 - 0.25;\n    part->m_yVector = -0.2  - (r01());\n    part->m_timeDie = 15000 + floor(r01() * 9000);\n    //printf( \"partnum = %d timedie = %f rand = %f\\n\",  partnumber, part->m_timeDie , r01());\n\n    double invDist = 1.0 / sqrt(part->m_xVector * part->m_xVector\n                                + part->m_yVector * part->m_yVector);\n    // normalise speed\n    part->m_xVector = part->m_xVector * invDist * emitter->m_speed;\n    part->m_yVector = part->m_yVector * invDist * emitter->m_speed;\n    // starting position within a 20 pixel area\n    part->m_x = (emitter->m_x + floor(r01() * 20) - 10);\n    part->m_y = (emitter->m_y + floor(r01() * 20) - 10);\n    // the initial age may be > 0. This is so there is already a smoke trail in\n    // place at the start\n    part->m_x += (part->m_xVector + emitter->m_windVelocity) * part->m_age;\n    part->m_y += part->m_yVector * part->m_age;\n    part->m_scale = 0.01;\n    part->m_alpha = 0;\n    part->m_angle = round(rand_range(0, 360));\n    // printf( \"x = %f y =%f\\n\", part->m_x, part->m_y);\n\n}\n\n\nUint32 getMilliCount() {\n    return SDL_GetTicks();\n}\n\nint isAlive(Particle* part)\n{\n    //if( part->m_y < 20 ) return 0;\n    //printf( \"age %u timedie %u\\n\", part->m_age, part->m_timeDie);\n    return part->m_age < part->m_timeDie;\n}\nvoid update(Particles *emitter, Particle* part, int partNumber)\n{\n    Uint32 timeElapsed;\n    Uint32 curr = getMilliCount();\n    timeElapsed = curr - emitter->m_lastRender;\n    //printf(\"get -elapsed %d emitter last render %d\\n\", timeElapsed, emitter->m_lastRender);\n    part->m_age += timeElapsed;\n    if (!isAlive(part))\n    {\n        //printf(\"Dead\\n\");\n        //printf( \"age %u timedie %u\\n\", part->m_age, part->m_timeDie);\n        // smoke eventually dies\n        /*if (r01() > emitter.m_dieRate)\n        {\n          part->m_canRegen = FALSE;\n        }\n        if (!part->m_canRegen)\n        {\n          return;\n        }*/\n        // regenerate\n        part->m_age = 1;\n        startRand(emitter, part, partNumber);\n        return;\n    }\n    // At start the particle fades in and expands rapidly (like in real life)\n    double fadeIn = part->m_timeDie * 0.01;\n    double startScale;\n    double maxStartScale = 0.4;\n    if (part->m_age < fadeIn)\n    {\n        part->m_alpha = ((part->m_age / fadeIn));\n        //printf(\"fade calc = %f \\n\", (part->m_age/fadeIn)*10 );\n        startScale = part->m_alpha * maxStartScale;\n        // y increases quicker because particle is expanding quicker\n        part->m_y += part->m_yVector * timeElapsed;\n\n    }\n    else\n    {\n        part->m_alpha = 1.0 - (part->m_age - fadeIn) / (part->m_timeDie - fadeIn);\n        startScale = maxStartScale;\n        part->m_y += part->m_yVector * timeElapsed;\n    }\n    // the x direction is influenced by wind velocity\n    part->m_x += (part->m_xVector + emitter->m_windVelocity) * timeElapsed;\n    part->m_scale = 0.001 + startScale + part->m_age / 4000.0;\n    //printf( \"x = %f y =%f\\n\", part->m_x, part->m_y);\n    /*printf(\"update m_speed: %f\\n\", emitter->m_speed);*/\n}\n\nvoid renderParticle(Particle* part, int partNumber)\n{\n    SDL_Rect *clip = NULL;\n    //if (!isAlive(part)) return;\n    if ( partNumber == 0 ) return;\n    SDL_Rect smokeLocal = smoke;\n\n    smokeLocal.h = round(smoke.h * part->m_scale);\n    smokeLocal.w = round(smoke.w * part->m_scale);\n    smokeLocal.x = round(part->m_x); //part->m_x-smoke.h * part->m_scale/2;\n    smokeLocal.y = round(part->m_y); //part->m_y+smoke.w * part->m_scale/2;\n\n\n\n    SDL_SetTextureAlphaMod(smokeTexture, part->m_alpha * 150 );\n    SDL_RenderCopyEx(renderer,\n                     smokeTexture,\n                     clip,\n                     &smokeLocal,\n                     0 /*part->m_angle*/,\n                     NULL,\n                     SDL_FLIP_NONE);\n\n\n}\n\n\nvoid initParticles(Particles *em, int x, int y) {\n    em->m_speed = 0.02;\n    em->m_alpha = 1.0;\n    em->m_windVelocity = 0.025;\n    em->m_dieRate = 0.95;\n    em->m_x = x;\n    em->m_y = y;\n    em->m_lastRender = getMilliCount();\n    for (int i = 0; i < PART_COUNT; i++)\n    {\n        em->particles[i].m_x = 0;\n        em->particles[i].m_canRegen = 1;\n        em->particles[i].m_age = i * 50000 * em->m_speed;\n\n        //Particle *cparticle = &emitter->particles[i];\n        startRand(&*em, &((*em).particles[i]), i);\n        //printf( \"part = %d x = %f y =%f age = %u die = %u\\n\",i, em.particles[i].m_x, em.particles[i].m_y, em.particles[i].m_age, em.particles[i].m_timeDie);\n\n    }\n}\n\n\n\n\n\n\n\n\nint init(SDL_Window **window, SDL_Renderer **renderer) {\n\n\n    //srand(time(NULL));\n\n    if ( SDL_Init( SDL_INIT_VIDEO ) < 0 ) {\n        printf( \"SDL could not initialize! SDL_Error: %s\\n\", SDL_GetError() );\n        return 1;\n    }\n\n    //start_time = SDL_GetTicks();\n    //Create window\n    gWindow = SDL_CreateWindow( \"Smoke Example\",\n                                SDL_WINDOWPOS_UNDEFINED,\n                                SDL_WINDOWPOS_UNDEFINED,\n                                SCREEN_WIDTH,\n                                SCREEN_HEIGHT,\n                                SDL_WINDOW_SHOWN );\n    if ( gWindow == NULL ) {\n        printf( \"Window could not be created! SDL_Error: %s\\n\", SDL_GetError() );\n        return 1;\n    }\n    printf(\"Got Window\\n\");\n\n    *renderer = SDL_CreateRenderer(gWindow, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);\n    if (renderer == NULL) {\n        printf(\"Renderer could not be created! SDL Error: %s\\n\", SDL_GetError());\n        return 1;\n    }\n\n    SDL_SetRenderDrawColor(*renderer, 0xFF, 0xFF, 0xFF, 0xFF);\n\n#ifndef EMSCRIPTEN\n    int imgFlags = IMG_INIT_PNG;\n    if ( !( IMG_Init( imgFlags ) & imgFlags ) ) {\n        printf( \"SDL_image could not initializessssss! SDL_image Error: %s\\n\", IMG_GetError() );\n        return 1;\n    }\n#endif\n\n    return 0;\n}\n\n\n\nint load_texture(SDL_Texture **smoketexture,\n                 SDL_Renderer *renderer) {\n    const char *bg_path = \"aftermath.png\";\n    const char *smoke_path = \"smoke.png\";\n    //Load image at specified path\n    SDL_Surface *loaded_surface = IMG_Load(smoke_path);\n    if (loaded_surface == NULL) {\n        printf( \"Unable to load image %s! SDL_image Error: %s\\n\",\n                smoke_path,\n                IMG_GetError());\n        return 1;\n    }\n\n    //Create texture from surface pixels\n    smokeTexture = SDL_CreateTextureFromSurface(renderer, loaded_surface);\n    if ( smokeTexture == NULL ) {\n        printf( \"Unable to create texture from %s! SDL Error: %s\\n\",\n                smoke_path,\n                SDL_GetError() );\n        return 1;\n    }\n    smoke.w = loaded_surface->w;\n    smoke.h = loaded_surface->h;\n    //Get rid of old loaded surface\n    SDL_FreeSurface(loaded_surface);\n\n    //Load image at specified path\n    loaded_surface = IMG_Load(bg_path);\n    if (loaded_surface == NULL) {\n        printf( \"Unable to load image %s! SDL_image Error: %s\\n\",\n                bg_path,\n                IMG_GetError());\n        return 1;\n    }\n\n    //Create texture from surface pixels\n    bgTexture = SDL_CreateTextureFromSurface(renderer, loaded_surface);\n    if ( bgTexture == NULL ) {\n        printf( \"Unable to create texture from %s! SDL Error: %s\\n\",\n                smoke_path,\n                SDL_GetError() );\n        return 1;\n    }\n    bg.w = loaded_surface->w;\n    bg.h = loaded_surface->h;\n    //Get rid of old loaded surface\n    SDL_FreeSurface(loaded_surface);\n\n    return 0;\n}\n\nvoid loop(void *passedEmit)\n{\n    Particles * emit = (Particles *)passedEmit;\n    double angle = 0.0;\n    SDL_Rect *clip = NULL;\n    printf(\"First %f\\n\", emit->m_speed);\n    //Event handler\n    SDL_Event ev;\n\n    //Handle events on queue\n    while ( SDL_PollEvent( &ev ) != 0 )\n    {\n        //User requests quit\n        if ( ev.type == SDL_QUIT )\n        {\n            quit = TRUE;\n        }\n    }\n\n\n    //emitter->m_speed = 0.02;\n    emit->m_windVelocity += (r01() - 0.5) * 0.0015;\n    SDL_RenderClear(renderer);\n    SDL_RenderCopyEx(renderer,\n                     bgTexture,\n                     clip,\n                     &bg,\n                     angle,\n                     NULL,\n                     SDL_FLIP_NONE);\n\n    for (int i = 0; i < PART_COUNT; i++)\n    {\n        //Particle *cparticle = &emitter->particles[i];\n        update(emit, &((*emit).particles[i]), i);\n        renderParticle(&((*emit).particles[i]), i);\n\n    }\n    //lastmill = getMilliCount();\n    SDL_RenderPresent(renderer);\n    //Update the surface\n    SDL_UpdateWindowSurface( gWindow );\n    emit->m_lastRender = getMilliCount();\n\n\n    //logEmitter( emitter, 0 );\n\n}\n\nint main( int argc, char* args[] )\n{\n    Particles emitter;\n\n    //Start up SDL and create window\n    if ( init(&gWindow, &renderer) )\n    {\n        printf( \"Failed to initialize!\\n\" );\n    }\n    else\n    {\n\n        if (load_texture(&smokeTexture,  renderer) == 1) {\n            printf(\"Failed to load texture\\n\");\n        }\n        else\n        {\n\n\n            initParticles( &emitter, 170, 315 );\n\n            printf(\"in main %f\\n\", emitter.m_speed);\n            emitter.m_lastRender = getMilliCount();\n\n            //Main loop flag\n\n#ifdef EMSCRIPTEN\n            emscripten_set_main_loop_arg((em_arg_callback_func)loop, (void*)&emitter, 0, 1);\n#else\n            while (!quit) {\n                SDL_Delay(15);\n                loop(&emitter);\n            }\n#endif\n\n        }\n    }\n\n    //Free resources and close SDL\n    SDL_DestroyTexture(smokeTexture);\n    smokeTexture = NULL;\n\n    SDL_DestroyRenderer(renderer);\n    renderer = NULL;\n\n    SDL_DestroyWindow(gWindow);\n    gWindow = NULL;\n\n    IMG_Quit();\n    SDL_Quit();\n\n    return 0;\n}\n"]}